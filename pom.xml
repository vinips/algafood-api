<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.vinips</groupId>
	<artifactId>algafood-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>algafood-api</name>
	<description>Api do delivery de comida, curso Especialista Spring Rest da AlgaWorks</description>
	<properties>
		<java.version>12</java.version>
	</properties>
	<dependencies>

		<!-- Dependência do Spring boot Starter para WEB e TEST de classes -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Restarta a aplicação automaticamente toda vez que salva um arquivo -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!-- Dependencia que ajuda na annotation @ConfigurationProperties. Qualquer 
			dúvida olhar aula 2.26 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Dependência do SDJ (Spring Data Jpa) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- JAR do mysql para conexão do DB -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- Flyway é ferramenta para versionamento de schemas do DB -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- Classes utilitárias para trabalhar de maneira mais simplificada com 
			strings, números, exceptions, etc. -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- Serve para testes de API, fazendo chamadas na API como se fossemos 
			um cliente ou mesmo usando o Postman, por exemplo -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy-json</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy</artifactId>
			<version>2.5.13</version><!--$NO-MVN-MAN-VER$-->
		</dependency>
		<dependency>
			<groupId>org.codehaus.groovy</groupId>
			<artifactId>groovy-json</artifactId>
			<version>2.5.13</version><!--$NO-MVN-MAN-VER$-->
		</dependency>
		
		<!-- Biblioteca que serve para mapear objetos e converter um tipo para outro. Ex: DTO para Entity e vice-versa  -->
		<dependency>
		  <groupId>org.modelmapper</groupId>
		  <artifactId>modelmapper</artifactId>
		  <version>2.4.2</version>
		</dependency>
		
		<!-- Serve para PropertyFilter no json, você passa os campos que quer filtrar na hora de receber o json de resposta.  -->
		<dependency>
		    <groupId>com.github.bohnman</groupId>
		    <artifactId>squiggly-filter-jackson</artifactId>
		    <version>1.3.18</version>
		</dependency>
		
		<!-- Jasper Reports para relatórios, já uso e conheço a um tempo  -->
		<dependency>
		  <groupId>net.sf.jasperreports</groupId>
		  <artifactId>jasperreports</artifactId>
		  <version>6.19.0</version>
		</dependency>
		
		<dependency>
		  <groupId>net.sf.jasperreports</groupId>
		  <artifactId>jasperreports-functions</artifactId>
		  <version>6.19.0</version>
		</dependency>

		<!-- A partir do Spring 2.3.0 o Bean Validation não é adicionado automaticamente 
			com o pacote spring-boot-starter-web Por isso é necessário adicionar a dependência 
			manualmente. -->
		<!-- <dependency> -->
		<!-- <groupId>org.springframework.boot</groupId> -->
		<!-- <artifactId>spring-boot-starter-validation</artifactId> -->
		<!-- </dependency> -->



	</dependencies>

	<build>
		<plugins>
			<!-- Plugin do Maven com o Spring Boot -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Serve para separar os Integrations Tests e API Tests dos Tests Unitários 
				na hora de buildar o projeto. Com esse plugin os Integrations Tests e API 
				Tests não rodam no momento do build do projeto. Rodar eles consome muito 
				tempo e não queremos isso quando estamos buildando, queremos apenas o build. 
				Usar o sufixo IT no final do nome das classes de Test para o plugin reconhecer 
				a classe. Os comandos normais para testar pelo mavem como mvnw test e o clean 
				package não pegam as classes IT. O comando usado é ./mvnw verify. Ver aula 
				10.8 para explicação da diferença entre os tipos de Teste. -->
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
